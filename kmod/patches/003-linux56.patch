diff -ur src.org/chap.c src/chap.c
--- a/src/chap.c	2020-04-02 13:20:20.000000000 -0700
+++ b/src/chap.c	2020-04-02 18:25:32.683588495 -0700
@@ -40,6 +40,10 @@
 #include "inc/ecb_iterators.h"
 #include "inc/utility.h"
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0)
+#define ioremap_nocache ioremap
+#endif
+
 extern DRV_CONFIG         drv_cfg;
 extern CHIPSET_CONFIG     pma;
 extern CPU_STATE          pcb;
diff -ur src.org/pax/pax.c src/pax/pax.c
--- a/src.org/pax/pax.c	2020-04-02 13:20:20.000000000 -0700
+++ b/src/pax/pax.c	2020-04-02 19:35:20.361068607 -0700
@@ -87,6 +87,14 @@
 
 static int pax_version_proc_read(struct seq_file*, void *);
 static int pax_version_proc_open(struct inode*, struct file*);
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0)
+static const struct proc_ops pax_version_ops = {
+    .proc_open  = pax_version_proc_open,
+    .proc_read  = seq_read,
+    .proc_lseek  = seq_lseek,
+    .proc_release  = single_release,
+};
+#else
 static struct file_operations pax_version_ops = {
     .owner = THIS_MODULE,
     .open  = pax_version_proc_open,
@@ -94,6 +102,7 @@
     .llseek  = seq_lseek,
     .release  = single_release,
 };
+#endif
 
 // Print macros for kernel debugging
 
diff -ur src.org/pci.c src/pci.c
--- a/src.org/pci.c	2020-04-02 13:20:20.000000000 -0700
+++ b/src/pci.c	2020-04-02 18:25:53.513949236 -0700
@@ -45,6 +45,9 @@
 #include "inc/pci.h"
 #include "inc/utility.h"
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0)
+#define ioremap_nocache ioremap
+#endif
 
 struct pci_bus* pci_buses[MAX_BUSNO] = {0};
 
diff -ur src.org/socperf/src/haswellunc_sa.c src/socperf/src/haswellunc_sa.c
--- a/src.org/socperf/src/haswellunc_sa.c	2020-04-02 13:20:20.000000000 -0700
+++ b/src/socperf/src/haswellunc_sa.c	2020-04-02 18:27:23.164501894 -0700
@@ -72,6 +72,10 @@
 #include "ecb_iterators.h"
 #include "inc/pci.h"
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0)
+#define ioremap_nocache ioremap
+#endif
+
 static U64            counter_virtual_address = 0;
 static U32            counter_overflow[HSWUNC_SA_MAX_COUNTERS];
 extern LWPMU_DEVICE   device_uncore;
diff -ur src.org/socperf/src/npk_uncore.c src/socperf/src/npk_uncore.c
--- a/src.org/socperf/src/npk_uncore.c	2020-04-02 13:20:20.000000000 -0700
+++ b/src/socperf/src/npk_uncore.c	2020-04-02 18:27:37.395748364 -0700
@@ -71,6 +71,9 @@
 #include "inc/control.h"
 #include "inc/npk_uncore.h"
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0)
+#define ioremap_nocache ioremap
+#endif
 
 extern LWPMU_DEVICE   device_uncore;
 static U32            counter_overflow[SOC_NPK_COUNTER_MAX_COUNTERS];
diff -ur src.org/socperf/src/pci.c src/socperf/src/pci.c
--- a/src.org/socperf/src/pci.c	2020-04-02 13:20:20.000000000 -0700
+++ b/src/socperf/src/pci.c	2020-04-02 18:27:09.492265096 -0700
@@ -68,6 +68,10 @@
 #include "socperfdrv.h"
 #include "pci.h"
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0)
+#define ioremap_nocache ioremap
+#endif
+
 /* ------------------------------------------------------------------------- */
 /*!
  * @fn extern int SOCPERF_PCI_Read_From_Memory_Address(addr, val)
diff -ur src.org/socperf/src/soc_uncore.c src/socperf/src/soc_uncore.c
--- a/src.org/socperf/src/soc_uncore.c	2020-04-02 13:20:20.000000000 -0700
+++ b/src/socperf/src/soc_uncore.c	2020-04-02 18:26:57.556058374 -0700
@@ -70,6 +70,10 @@
 #include "inc/ecb_iterators.h"
 #include "inc/pci.h"
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0)
+#define ioremap_nocache ioremap
+#endif
+
 #if defined (PCI_HELPERS_API)
 #include <asm/intel_mid_pcihelpers.h>
 #elif defined(DRV_CHROMEOS)
diff -ur src.org/utility.c src/utility.c
--- a/src.org/utility.c	2020-04-02 13:20:20.000000000 -0700
+++ b/src/utility.c	2020-04-02 18:54:02.271136122 -0700
@@ -33,7 +33,7 @@
 #include <linux/kallsyms.h>
 #include <asm/msr.h>
 #include <linux/ptrace.h>
-#include <linux/time.h>
+#include <linux/timekeeping.h>
 #include <linux/vmalloc.h>
 
 #include "lwpmudrv_defines.h"
@@ -858,12 +858,6 @@
                         }
                     }
                 }
-
-#if defined(CONFIG_DYNAMIC_FTRACE)
-                if (category_verbosity & LOG_CHANNEL_TRACEK) {
-                    trace_printk("%s", tmp_array);
-                }
-#endif
             }
         }
 
@@ -898,7 +892,11 @@
     void
 )
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5,6,0)
     struct timespec cur_time;
+#else
+    struct timespec64 cur_time;
+#endif
     U32             size = sizeof(*driver_log_buffer);
     U8              using_contiguous_physical_memory;
     U32             bitness;
@@ -954,7 +952,11 @@
     DRV_LOG_BUFFER_log_size(driver_log_buffer)            = sizeof(*driver_log_buffer);
     DRV_LOG_BUFFER_max_nb_pri_entries(driver_log_buffer)  = DRV_LOG_MAX_NB_PRI_ENTRIES;
     DRV_LOG_BUFFER_max_nb_aux_entries(driver_log_buffer)  = DRV_LOG_MAX_NB_AUX_ENTRIES;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5,6,0)
     getnstimeofday(&cur_time);
+#else
+    ktime_get_real_ts64(&cur_time);
+#endif
     DRV_LOG_BUFFER_init_time(driver_log_buffer)           = cur_time.tv_sec;
     DRV_LOG_BUFFER_disambiguator(driver_log_buffer)       = 0;
     DRV_LOG_BUFFER_log_version(driver_log_buffer)         = DRV_LOG_VERSION;
diff -ur src.org/vtsspp/apic.c src/vtsspp/apic.c
--- a/src.org/vtsspp/apic.c	2020-04-02 13:20:20.000000000 -0700
+++ b/src/vtsspp/apic.c	2020-04-02 18:26:12.203272915 -0700
@@ -32,6 +32,10 @@
 
 #include <asm/io.h>
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0)
+#define ioremap_nocache ioremap
+#endif
+
 /* APIC base MSR */
 #define VTSS_APIC_BASE_MSR       0x01b
 
diff -ur src.org/vtsspp/procfs.c src/vtsspp/procfs.c
--- a/src.org/vtsspp/procfs.c	2020-04-02 13:20:20.000000000 -0700
+++ b/src/vtsspp/procfs.c	2020-04-02 19:47:10.820772845 -0700
@@ -607,13 +607,12 @@
     return 0;
 }
 
-static const struct file_operations vtss_procfs_ctrl_fops = {
-    .owner   = THIS_MODULE,
-    .read    = vtss_procfs_ctrl_read,
-    .write   = vtss_procfs_ctrl_write,
-    .open    = vtss_procfs_ctrl_open,
-    .release = vtss_procfs_ctrl_close,
-    .poll    = vtss_procfs_ctrl_poll,
+static const struct proc_ops vtss_procfs_ctrl_fops = {
+    .proc_read    = vtss_procfs_ctrl_read,
+    .proc_write   = vtss_procfs_ctrl_write,
+    .proc_open    = vtss_procfs_ctrl_open,
+    .proc_release = vtss_procfs_ctrl_close,
+    .proc_poll    = vtss_procfs_ctrl_poll,
 };
 
 /* ************************************************************************* */
@@ -651,12 +650,11 @@
     return seq_open(file, &vtss_procfs_debug_sops);
 }
 
-static const struct file_operations vtss_procfs_debug_fops = {
-    .owner   = THIS_MODULE,
-    .open    = vtss_procfs_debug_open,
-    .read    = seq_read,
-    .llseek  = seq_lseek,
-    .release = seq_release,
+static const struct proc_ops vtss_procfs_debug_fops = {
+    .proc_open    = vtss_procfs_debug_open,
+    .proc_read    = seq_read,
+    .proc_lseek  = seq_lseek,
+    .proc_release = seq_release,
 };
 
 /* ************************************************************************* */
@@ -725,12 +723,11 @@
     return 0;
 }
 
-static const struct file_operations vtss_procfs_cpumask_fops = {
-    .owner   = THIS_MODULE,
-    .read    = vtss_procfs_cpumask_read,
-    .write   = vtss_procfs_cpumask_write,
-    .open    = vtss_procfs_cpumask_open,
-    .release = vtss_procfs_cpumask_close,
+static const struct proc_ops vtss_procfs_cpumask_fops = {
+    .proc_read    = vtss_procfs_cpumask_read,
+    .proc_write   = vtss_procfs_cpumask_write,
+    .proc_open    = vtss_procfs_cpumask_open,
+    .proc_release = vtss_procfs_cpumask_close,
 };
 
 /* ************************************************************************* */
@@ -793,12 +790,11 @@
     return 0;
 }
 
-static const struct file_operations vtss_procfs_defsav_fops = {
-    .owner   = THIS_MODULE,
-    .read    = vtss_procfs_defsav_read,
-    .write   = vtss_procfs_defsav_write,
-    .open    = vtss_procfs_defsav_open,
-    .release = vtss_procfs_defsav_close,
+static const struct proc_ops vtss_procfs_defsav_fops = {
+    .proc_read    = vtss_procfs_defsav_read,
+    .proc_write   = vtss_procfs_defsav_write,
+    .proc_open    = vtss_procfs_defsav_open,
+    .proc_release = vtss_procfs_defsav_close,
 };
 
 /* ************************************************************************* */
@@ -836,12 +832,11 @@
     return seq_open(file, &vtss_procfs_targets_sops);
 }
 
-static const struct file_operations vtss_procfs_targets_fops = {
-    .owner   = THIS_MODULE,
-    .open    = vtss_procfs_targets_open,
-    .read    = seq_read,
-    .llseek  = seq_lseek,
-    .release = seq_release,
+static const struct proc_ops vtss_procfs_targets_fops = {
+    .proc_open    = vtss_procfs_targets_open,
+    .proc_read    = seq_read,
+    .proc_lseek  = seq_lseek,
+    .proc_release = seq_release,
 };
 
 /* ************************************************************************* */
@@ -903,12 +898,11 @@
     return 0;
 }
 
-static const struct file_operations vtss_procfs_timesrc_fops = {
-    .owner   = THIS_MODULE,
-    .read    = vtss_procfs_timesrc_read,
-    .write   = vtss_procfs_timesrc_write,
-    .open    = vtss_procfs_timesrc_open,
-    .release = vtss_procfs_timesrc_close,
+static const struct proc_ops vtss_procfs_timesrc_fops = {
+    .proc_read    = vtss_procfs_timesrc_read,
+    .proc_write   = vtss_procfs_timesrc_write,
+    .proc_open    = vtss_procfs_timesrc_open,
+    .proc_release = vtss_procfs_timesrc_close,
 };
 
 /* ************************************************************************* */
@@ -966,12 +960,11 @@
     return 0;
 }
 
-static const struct file_operations vtss_procfs_timelimit_fops = {
-    .owner   = THIS_MODULE,
-    .read    = vtss_procfs_timelimit_read,
-    .write   = vtss_procfs_timelimit_write,
-    .open    = vtss_procfs_timelimit_open,
-    .release = vtss_procfs_timelimit_close,
+static const struct proc_ops vtss_procfs_timelimit_fops = {
+    .proc_read    = vtss_procfs_timelimit_read,
+    .proc_write   = vtss_procfs_timelimit_write,
+    .proc_open    = vtss_procfs_timelimit_open,
+    .proc_release = vtss_procfs_timelimit_close,
 };
 
 /* ************************************************************************* */
@@ -1059,7 +1052,7 @@
     }
 }
 
-static int vtss_procfs_create_entry(const char* name, const struct file_operations* fops)
+static int vtss_procfs_create_entry(const char* name, const struct proc_ops* fops)
 {
     struct proc_dir_entry *pde = proc_create(name, (mode_t)(mode ? (mode & 0666) : 0660), vtss_procfs_root, fops);
     if (pde == NULL) {
diff -ur src.org/vtsspp/record.c src/vtsspp/record.c
--- a/src.org/vtsspp/record.c	2020-04-02 13:20:20.000000000 -0700
+++ b/src/vtsspp/record.c	2020-04-02 19:51:52.914419880 -0700
@@ -673,15 +673,15 @@
     }
     /* generate time marker record */
     {
-        struct timespec now;
+        struct timespec64 now;
         time_marker_record_t timark;
         timark.flagword = UEC_LEAF1 | UEC_VECTORED | UECL1_REALTSC;
         timark.vectored = UECL1_REALTSC;
         timark.vec_no   = 2;
         timark.tsc      = vtss_time_real();
-        getnstimeofday(&now);
+        ktime_get_real_ts64(&now);
         /* convert global time to 100ns units */
-        timark.utc      = div64_u64((u64)timespec_to_ns(&now), 100ULL);
+        timark.utc      = div64_u64((u64)timespec64_to_ns(&now), 100ULL);
         rc |= vtss_transport_record_write(trnd, &timark, sizeof(timark), NULL, 0, is_safe);
     }
 
diff -ur src.org/vtsspp/time.h src/vtsspp/time.h
--- a/src.org/vtsspp/time.h	2020-04-02 13:20:20.000000000 -0700
+++ b/src/vtsspp/time.h	2020-04-02 19:41:09.597822272 -0700
@@ -59,9 +59,9 @@
 static inline unsigned long long vtss_time_real(void)
 {
     if (!vtss_time_source) {
-        struct timespec now;
-        getrawmonotonic(&now); /* getnstimeofday(&now); */
-        return (unsigned long long)timespec_to_ns(&now);
+        struct timespec64 now;
+        ktime_get_real_ts64(&now);
+        return (unsigned long long)timespec64_to_ns(&now);
     } else
         return (unsigned long long)get_cycles();
 }
@@ -72,14 +72,14 @@
     unsigned long long tsc = vtss_time_cpu();
 
     if (!vtss_time_source) {
-        struct timespec now1, now2;
-        getrawmonotonic(&now1);
+        struct timespec64 now1, now2;
+        ktime_get_real_ts64(&now1);
         // rdtsc barrier
         asm volatile("mfence");
         asm volatile("lfence");
-        getrawmonotonic(&now2);
+        ktime_get_real_ts64(&now2);
         *ptsc  = (tsc + vtss_time_cpu()) / 2;
-        *preal = (timespec_to_ns(&now1) + timespec_to_ns(&now2)) / 2;
+        *preal = (timespec64_to_ns(&now1) + timespec64_to_ns(&now2)) / 2;
     } else
         *ptsc = *preal = tsc;
 }
diff -ur src.org/vtsspp/transport.c src/vtsspp/transport.c
--- a/src.org/vtsspp/transport.c	2020-04-02 13:20:20.000000000 -0700
+++ b/src/vtsspp/transport.c	2020-04-02 19:50:40.170221540 -0700
@@ -1421,13 +1421,12 @@
     return 0;
 }
 
-static struct file_operations vtss_transport_fops = {
-    .owner   = THIS_MODULE,
-    .read    = vtss_transport_read,
-    .write   = vtss_transport_write,
-    .open    = vtss_transport_open,
-    .release = vtss_transport_close,
-    .poll    = vtss_transport_poll,
+static struct proc_ops vtss_transport_fops = {
+    .proc_read    = vtss_transport_read,
+    .proc_write   = vtss_transport_write,
+    .proc_open    = vtss_transport_open,
+    .proc_release = vtss_transport_close,
+    .proc_poll    = vtss_transport_poll,
 };
 
 static void vtss_transport_remove(struct vtss_transport_data* trnd)
diff -ur src.org/vtsspp/utils.c src/vtsspp/utils.c
--- a/src.org/vtsspp/utils.c	2020-04-02 13:20:20.000000000 -0700
+++ b/src/vtsspp/utils.c	2020-04-02 19:54:10.651688908 -0700
@@ -30,6 +30,7 @@
 #include "utils.h"
 
 #include <linux/kallsyms.h>
+#include <asm-generic/io.h>
 
 #ifdef CONFIG_KALLSYMS
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(3,0,0)
